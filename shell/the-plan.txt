Chromite Ideas

sjg, 7-Jan-12, updated 24-Feb-12, updated 27-Feb-12

General Philosophy
------------------
1. All commands that merely duplicate existing functionality are thin wrappers
over existing scripts (e.g. setup_board, build_packages, build_image). This
script does not add any smarts to these underlying commands, and merely
aliases them to different names.

2. Chromite offers less/no verbosity, and better guidance towards the useful
commands.

3. The 'less verbosity' feature is planned to be used in the buildbot to
reduce the amount of output, but still allow users to drill down via uploaded
log files.

4. In general, we should try to focus on commands that we actively use in our
existing codebase.


(due to requests I have added some notes to the commands below in
{squiggly brackets}. If you are not interested in the implementation details I
hope you can ignore these.)

Now
---
cr board - manage boards
mk      <board>           Create new board {calls setup_board}
rm      <board>           Remove board
show    <board>           Show info about a board
ls      [all]             List active/all boards
                            active: boards you have created in your env.
                            all: boards that are available to create

cr build - make builds and images
[mk]    <board/all>       Create new build for board (perhaps including
                          a test image by default). {Calls build_packages.}

cr env - manage chroot
mk      [<name>]          Create a new chroot. {Calls cros_sdk --download}
rm      [<name>]          Delete a chroot {cros_sdk --delete}
ls                        List chroots

cr image - manage built images
mk      <board>           Create a new image
rm      all               Remove all images
rm      <board> <id>/all  Remove image(s)
show    <board> <id>      Info about an image
ls      [<board>/all]     List image for a board (all boards if empty)

cr make
[inc]   [<package/dir>]   Build package incrementally (current dir. by default)
clean   [<package/dir>]   Clean source directory (use after incremental build)
full    [<package/dir>]   Do a full make of package (not a cros_workon_make)
                              (Uses emerge -uDNv --selective=n)
(all take -b <board> option and -l to build local source)

(need a way to make a package and send it to the target immediately for
U-Boot, kernel and generic package)


Later
-----
New 'repo' functions TBD - manage change lists (uses current directory to
determine package). These ideas are here for want of a better place.
mk      <branch>       Create new branch
ls                     List available branches (and TBD upload / gerrit status)
queue   <branch>       Queue branch for commit
reviews                List my outstanding reviews along with latency
rm      <branch>       Delete branch
upload  <branch>       Upload branch
verify  <branch>       Mark branch as verified

cr repo - manage repos
mk [full/mini]         Set up a new repo here
full - full source code (larger download, easier to find source, default)
mini - minimal source code (smaller download, initial disk usage)
rm                     Remove repo and all source! Dangerous!
ls                     List repos (but there can be only one)
show                   Show info about repo

cr sync
(maybe drop this since it doesn't add anything over existing 'repo')
all                    Sync source (default)
net                    Only do network operations (just download source)
local                  Only do local operations (just sync downloaded source)

cr work
(would be better to remove this and cros_workon also, and just use an
explicit flag for building remote/local sources)
[start] [<board>] <package>  Start working on a package (for one or all boards)
stop    [<board>] <package>  Stop working on a package (for one or all boards)
ls      [<board>]      List packages being worked on
ls      all            List available packages

cr job - manage jobs (later)
(This is for running builds, checking progress and obtaining log output after
the event, will update. It isn't intended to replace shell job control.)
ls      <id>           List jobs
rm      <id>           Remove / kill a job
show    <id>           Show info about a job
dump    <id>           Dump job output

cr rebase - manage a rebase operation
(This is for an automated rebase, with a config file to indicating tagging,
commits to skip, etc. It uses 'git rebase -i' but drives it for you. Chromite
adds tags to each commit that it modifies, indicated files that were lost due
to conflicts. This is used for those projects with upstream repos and regular
rebase schedules where we have hundreds of commits and many devs working)
run     <target>       Rebase current branch onto target, summarize the result
(note perhaps this eventually belongs in 'git' or 'repo' - will need more
discussion).

Other integrations:
- Tab completion for board/build/id
- (apparently controversial) New code review notification at command prompt
- trybot integration
- Support for Chrome developer workflow, e.g. cros_chrome_make, anything
    else Chrome developers need.
- Also, need support for "build from source" Chrome workflow, or
    make Chrome a full cros_workon package with real incremental
    builds (right now, with --chromefromsource, build packages takes
    about 25 minutes on a 24 (hyperthreaded) core machine to build
    Chrome. Every time you run build_packages.)
- asharif: I'd like shortcuts to building N boards from source
    entirely (including chroot from source) using a single line:
       build_all_from_source x86-generic arm-generic amd64-generic
    Would be a stress test for toolchain chagnes.
- asharif: Would it be possible to have mkdev <board> for building everything
    dev and test? Like pass all the --withdev --withtest, etc. flags and
    mod_image_for_test, etc. etc.?
- cr image nfs to make an NFS image
- Log storing/retrieval (part of cr job) will be needed sooner rather than
    later.
- asharif: Could we have a "clone" functionality to clone your tree? Three
    use cases:
      + Clone a tree as it is without your local modifications.
      + Clone a tree with your local modifications.
      + Produce a single file with all git hashes and patches on top of that
        that you can give to another developer who can then clone your tree
        for reproducing problems.
- davidjames: Running the smoke suite
- davidjames: Starting a VM
- davidjames: Running unit tests on a source dir, whether they are controlled
    by an ebuild or not. (E.g., we should be able to run unit tests on
    cbuildbot)
